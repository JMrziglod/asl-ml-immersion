steps:
# Build the trainer image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/trainer_image_covertype_vertex:latest', '.']
  dir: $_PIPELINE_FOLDER/trainer_image_vertex
  
# Push the trainer image, to make it available in the compile step
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push the trainer image'
  args: ['push', 'gcr.io/$PROJECT_ID/trainer_image_covertype_vertex:latest']
  dir: $_PIPELINE_FOLDER/trainer_image_vertex
    
# Compile the pipeline
- name: 'gcr.io/$PROJECT_ID/kfp-cli-vertex'
  args:
  - '-c'
  - |
    dsl-compile-v2 # TODO
  env:
  - 'PIPELINE_ROOT=gs://$PROJECT_ID-kfp-artifact-store/pipeline'
  - 'PROJECT_ID=$PROJECT_ID'
  - 'REGION=$_REGION'
  - 'SERVING_CONTAINER_IMAGE_URI=us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-20:latest'
  - 'TRAINING_CONTAINER_IMAGE_URI=gcr.io/$PROJECT_ID/trainer_image_covertype_vertex:latest'
  - 'TRAINING_FILE_PATH=gs://$PROJECT_ID-kfp-artifact-store/data/training/dataset.csv'
  - 'VALIDATION_FILE_PATH=gs://$PROJECT_ID-kfp-artifact-store/data/validation/dataset.csv'
  dir: pipeline_vertex
  
# Run the pipeline
- name: 'gcr.io/$PROJECT_ID/kfp-cli-vertex'
  args:
  - '-c'
  - |
    python kfp-cli_vertex/run_pipeline.py  # TODO
    
# Push the images to Container Registry
# TODO: List the images to be pushed to the project Docker registry
images: ['gcr.io/$PROJECT_ID/trainer_image_covertype_vertex:latest']


# This is required since the pipeline run overflows the default timeout
timeout: 10800s
